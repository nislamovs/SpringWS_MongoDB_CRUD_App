plugins {
	id "io.freefair.lombok" version "4.1.6"
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	id 'com.palantir.docker' version '0.22.1'
	id 'com.palantir.docker-run' version '0.22.1'
}

group = 'com.soap'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

// tag::configurations[]
configurations {
	jaxb
}
// end::configurations[]
allprojects {
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		maven { url "https://repo.maven.apache.org/maven2" }
		jcenter { url "http://jcenter.bintray.com/" }
	}
}

// tag::wsdl[]
task genJaxb {

	System.setProperty('javax.net.ssl.keyStoreType', 'pkcs12')
	System.setProperty('javax.net.ssl.keyStore', "${projectDir}/src/main/resources/clientWs.p12")
	System.setProperty('javax.net.ssl.keyStorePassword', 'password')
	System.setProperty('javax.net.ssl.keyPassword', 'password')
	System.setProperty('javax.net.ssl.trustStore', "${projectDir}/src/main/resources/truststore.jks")
	System.setProperty('javax.net.ssl.trustStorePassword', 'password')
	System.setProperty('sun.security.ssl.allowUnsafeRenegotiation','true')

	ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
	ext.classesDir = "${buildDir}/classes/jaxb"
	ext.schema = "https://localhost:8443/api/v1/ws/persons/persons.wsdl"

	outputs.dir classesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)
			mkdir(dir: classesDir)

			xjc(destdir: sourcesDir, schema: schema,
					package: "com.soap.soapclient.wsdl") {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}

			javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
					debugLevel: "lines,vars,source",
					classpath: configurations.jaxb.asPath) {
				src(path: sourcesDir)
				include(name: "**/*.java")
				include(name: "*.java")
			}

			copy(todir: classesDir) {
				fileset(dir: sourcesDir, erroronmissingdir: false) {
					exclude(name: "**/*.java")
				}
			}
		}
	}
}
// end::wsdl[]

dependencies {
// tag::dependency[]
	//	Lombok
	compileOnly 			'org.projectlombok:lombok'
	annotationProcessor 	'org.projectlombok:lombok'

//	Spring
	implementation 			'org.springframework.boot:spring-boot-starter'
	implementation 			'org.springframework.boot:spring-boot-starter-web'
	implementation          'javax.validation:validation-api:2.0.1.Final'

//SOAP specific
//	implementation  		'org.springframework.boot:spring-boot-starter-web-services'
	implementation ('org.springframework.boot:spring-boot-starter-web-services') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}

//	implementation 			'wsdl4j:wsdl4j'
	implementation 			'org.springframework.ws:spring-ws-core'
	implementation 			'org.apache.httpcomponents:httpclient:4.5.4'

	//Fixing "Implementation of JAXB-API has not been found on module path or classpath." error.
	compile('javax.xml.bind:jaxb-api:2.3.0')
	compile('javax.activation:activation:1.1')
	compile('org.glassfish.jaxb:jaxb-runtime:2.3.0')
	compile(files(genJaxb.classesDir).builtBy(genJaxb))

	jaxb("org.glassfish.jaxb:jaxb-xjc")


//	Mapping
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

// end::dependency[]
	testImplementation 		'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

// tag::bootjar[]
bootJar {
	archiveBaseName = 'soap_client'
	archiveVersion =  '1.0.0'
	mainClassName = 'com.soap.soapclient.SoapclientApplication'
}
// end::bootjar[]


task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree("build/libs/soap_client-1.0.0.jar"))
	into("build/dependency")
}

docker {
	name "soap_client"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}